{"version":3,"file":"js/173.f394223691fa4e68bab0.bundle.js","mappings":"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","sources":["webpack://cad-ocjs/./src/render_threejs/openCascadeHelper.js","webpack://cad-ocjs/./src/render_threejs/viewCube.js","webpack://cad-ocjs/./src/render_threejs/library.js","webpack://cad-ocjs/./src/render_threejs/script.js"],"sourcesContent":["import { Face3, Vector3 } from 'three'\n\nconst openCascadeHelper = {\n  setOpenCascade(openCascade) {\n    this.openCascade = openCascade\n  },\n  tessellate(shape) {\n    const facelist = []\n    new this.openCascade.BRepMesh_IncrementalMesh_2(\n      shape,\n      0.1,\n      false,\n      0.5,\n      false\n    )\n    const ExpFace = new this.openCascade.TopExp_Explorer_1()\n    for (\n      ExpFace.Init(\n        shape,\n        this.openCascade.TopAbs_ShapeEnum.TopAbs_FACE,\n        this.openCascade.TopAbs_ShapeEnum.TopAbs_SHAPE\n      );\n      ExpFace.More();\n      ExpFace.Next()\n    ) {\n      const myFace = this.openCascade.TopoDS.Face_1(ExpFace.Current())\n      const aLocation = new this.openCascade.TopLoc_Location_1()\n      const myT = this.openCascade.BRep_Tool.Triangulation(\n        myFace,\n        aLocation,\n        0 /* == Poly_MeshPurpose_NONE */\n      )\n      if (myT.IsNull()) {\n        continue\n      }\n\n      const this_face = {\n        vertex_coord: [],\n        normal_coord: [],\n        tri_indexes: [],\n        number_of_triangles: 0,\n      }\n\n      const pc = new this.openCascade.Poly_Connect_2(myT)\n      const triangulation = myT.get()\n\n      // write vertex buffer\n      this_face.vertex_coord = new Array(triangulation.NbNodes() * 3)\n      for (let i = 1; i <= triangulation.NbNodes(); i++) {\n        const p = triangulation.Node(i).Transformed(aLocation.Transformation())\n        this_face.vertex_coord[(i - 1) * 3 + 0] = p.X()\n        this_face.vertex_coord[(i - 1) * 3 + 1] = p.Y()\n        this_face.vertex_coord[(i - 1) * 3 + 2] = p.Z()\n      }\n\n      // write normal buffer\n      const myNormal = new this.openCascade.TColgp_Array1OfDir_2(\n        1,\n        triangulation.NbNodes()\n      )\n      this.openCascade.StdPrs_ToolTriangulatedShape.Normal(myFace, pc, myNormal)\n      this_face.normal_coord = new Array(myNormal.Length() * 3)\n      for (let i = myNormal.Lower(); i <= myNormal.Upper(); i++) {\n        const d = myNormal.Value(i).Transformed(aLocation.Transformation())\n        this_face.normal_coord[(i - 1) * 3 + 0] = d.X()\n        this_face.normal_coord[(i - 1) * 3 + 1] = d.Y()\n        this_face.normal_coord[(i - 1) * 3 + 2] = d.Z()\n      }\n\n      // write triangle buffer\n      const orient = myFace.Orientation_1()\n      const triangles = myT.get().Triangles()\n      this_face.tri_indexes = new Array(triangles.Length() * 3)\n      let validFaceTriCount = 0\n      for (let nt = 1; nt <= myT.get().NbTriangles(); nt++) {\n        const t = triangles.Value(nt)\n        let n1 = t.Value(1)\n        let n2 = t.Value(2)\n        let n3 = t.Value(3)\n        if (orient !== this.openCascade.TopAbs_Orientation.TopAbs_FORWARD) {\n          let tmp = n1\n          n1 = n2\n          n2 = tmp\n        }\n        this_face.tri_indexes[validFaceTriCount * 3 + 0] = n1\n        this_face.tri_indexes[validFaceTriCount * 3 + 1] = n2\n        this_face.tri_indexes[validFaceTriCount * 3 + 2] = n3\n        validFaceTriCount++\n      }\n      this_face.number_of_triangles = validFaceTriCount\n      facelist.push(this_face)\n    }\n    return facelist\n  },\n  joinPrimitives(facelist) {\n    let obP = 0\n    let obN = 0\n    let obTR = 0\n    let advance = 0\n    const locVertexcoord = []\n    const locNormalcoord = []\n    const locTriIndices = []\n\n    facelist.forEach(myface => {\n      for (let x = 0; x < myface.vertex_coord.length / 3; x++) {\n        locVertexcoord[obP * 3 + 0] = myface.vertex_coord[x * 3 + 0]\n        locVertexcoord[obP * 3 + 1] = myface.vertex_coord[x * 3 + 1]\n        locVertexcoord[obP * 3 + 2] = myface.vertex_coord[x * 3 + 2]\n        obP++\n      }\n      for (let x = 0; x < myface.normal_coord.length / 3; x++) {\n        locNormalcoord[obN * 3 + 0] = myface.normal_coord[x * 3 + 0]\n        locNormalcoord[obN * 3 + 1] = myface.normal_coord[x * 3 + 1]\n        locNormalcoord[obN * 3 + 2] = myface.normal_coord[x * 3 + 2]\n        obN++\n      }\n      for (let x = 0; x < myface.tri_indexes.length / 3; x++) {\n        locTriIndices[obTR * 3 + 0] =\n          myface.tri_indexes[x * 3 + 0] + advance - 1\n        locTriIndices[obTR * 3 + 1] =\n          myface.tri_indexes[x * 3 + 1] + advance - 1\n        locTriIndices[obTR * 3 + 2] =\n          myface.tri_indexes[x * 3 + 2] + advance - 1\n        obTR++\n      }\n\n      advance = obP\n    })\n    return [locVertexcoord, locNormalcoord, locTriIndices]\n  },\n  objGetTriangle(trianglenum, locTriIndices) {\n    const pID = locTriIndices[trianglenum * 3 + 0] * 3\n    const qID = locTriIndices[trianglenum * 3 + 1] * 3\n    const rID = locTriIndices[trianglenum * 3 + 2] * 3\n\n    const vertices = [pID, qID, rID]\n    const normals = [pID, qID, rID]\n    const texcoords = [pID, qID, rID]\n    return [vertices, normals, texcoords]\n  },\n  generateGeometry(\n    tot_triangle_count,\n    locVertexcoord,\n    locNormalcoord,\n    locTriIndices\n  ) {\n    const vertices = []\n    const faces = []\n    function v(x, y, z) {\n      vertices.push(new Vector3(x, y, z))\n    }\n    function f3(a, b, c, n1_x, n1_y, n1_z, n2_x, n2_y, n2_z, n3_x, n3_y, n3_z) {\n      faces.push(\n        new Face3(a, b, c, [\n          new Vector3(n1_x, n1_y, n1_z),\n          new Vector3(n2_x, n2_y, n2_z),\n          new Vector3(n3_x, n3_y, n3_z),\n        ])\n      )\n    }\n    for (let i = 0; i < tot_triangle_count; i++) {\n      const [vertices_idx /*normals_idx*/ /*texcoords_idx*/, ,] =\n        this.objGetTriangle(i, locTriIndices)\n      // first vertex\n      v(\n        locVertexcoord[vertices_idx[0] + 0],\n        locVertexcoord[vertices_idx[0] + 1],\n        locVertexcoord[vertices_idx[0] + 2]\n      )\n      // second vertex\n      v(\n        locVertexcoord[vertices_idx[1] + 0],\n        locVertexcoord[vertices_idx[1] + 1],\n        locVertexcoord[vertices_idx[1] + 2]\n      )\n      // third vertex\n      v(\n        locVertexcoord[vertices_idx[2] + 0],\n        locVertexcoord[vertices_idx[2] + 1],\n        locVertexcoord[vertices_idx[2] + 2]\n      )\n    }\n    for (let i = 0; i < tot_triangle_count; i++) {\n      const [, /*vertices_idx*/ normals_idx /*texcoords_idx*/] =\n        this.objGetTriangle(i, locTriIndices)\n      f3(\n        0 + i * 3,\n        1 + i * 3,\n        2 + i * 3,\n        locNormalcoord[normals_idx[0] + 0],\n        locNormalcoord[normals_idx[0] + 1],\n        locNormalcoord[normals_idx[0] + 2],\n        locNormalcoord[normals_idx[1] + 0],\n        locNormalcoord[normals_idx[1] + 1],\n        locNormalcoord[normals_idx[1] + 2],\n        locNormalcoord[normals_idx[2] + 0],\n        locNormalcoord[normals_idx[2] + 1],\n        locNormalcoord[normals_idx[2] + 2]\n      )\n    }\n    return [vertices, faces]\n  },\n}\n\nexport default openCascadeHelper\n","// render_threejs/viewCube.js\nimport * as THREE from 'three'\n\nlet cubeScene, cubeCamera, cubeRenderer\nlet viewCubeMesh\nlet mainCameraRef // 메인 카메라 참조\n\nconst CUBE_SIZE = 1 // 내부 큐브 크기\nconst MARGIN = 10 // 뷰포트에서의 여백 (px)\nconst CUBE_DIV_SIZE = 100 // 뷰큐브 div 크기 (px) - CSS와 일치\n\nexport function initViewCube(mainCamera, mainRenderer) {\n  mainCameraRef = mainCamera // 메인 카메라 참조 저장\n\n  const container = document.getElementById('viewcube-container')\n  if (!container) {\n    console.error('ViewCube container not found!')\n    return\n  }\n\n  // 1. 뷰큐브용 렌더러 설정\n  cubeRenderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }) // alpha:true 배경 투명\n  cubeRenderer.setSize(CUBE_DIV_SIZE, CUBE_DIV_SIZE)\n  cubeRenderer.setPixelRatio(window.devicePixelRatio)\n  container.appendChild(cubeRenderer.domElement)\n\n  // 2. 뷰큐브용 Scene 설정\n  cubeScene = new THREE.Scene()\n\n  // 3. 뷰큐브용 카메라 설정 (Orthographic)\n  const aspect = 1 // 정사각형\n  const frustumSize = CUBE_SIZE * 1.5 // 큐브가 카메라에 꽉 차도록 크기 조절\n  cubeCamera = new THREE.OrthographicCamera(\n    (frustumSize * aspect) / -2,\n    (frustumSize * aspect) / 2,\n    frustumSize / 2,\n    frustumSize / -2,\n    0.1,\n    100\n  )\n  cubeCamera.position.z = 5 // 카메라 위치\n\n  // 4. 뷰큐브 메쉬 생성 (텍스트 포함)\n  const loader = new THREE.TextureLoader()\n  const faceTextures = [\n    createFaceTexture('+X', 'rgb(255, 100, 100)'), // Right (+X)\n    createFaceTexture('-X', 'rgb(255, 150, 150)'), // Left (-X)\n    createFaceTexture('+Y', 'rgb(100, 255, 100)'), // Top (+Y)\n    createFaceTexture('-Y', 'rgb(150, 255, 150)'), // Bottom (-Y)\n    createFaceTexture('+Z', 'rgb(100, 100, 255)'), // Front (+Z)\n    createFaceTexture('-Z', 'rgb(150, 150, 255)'), // Back (-Z)\n  ]\n\n  const materials = faceTextures.map(\n    texture =>\n      new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide })\n  )\n  const geometry = new THREE.BoxGeometry(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE)\n  viewCubeMesh = new THREE.Mesh(geometry, materials)\n  cubeScene.add(viewCubeMesh)\n\n  // 5. (선택) 뷰큐브 주변에 축 표시기 추가 (선)\n  const axesHelper = new THREE.AxesHelper(CUBE_SIZE * 0.8)\n  cubeScene.add(axesHelper)\n}\n\n// 각 면에 텍스트를 그리는 함수\nfunction createFaceTexture(text, bgColor) {\n  const canvas = document.createElement('canvas')\n  const size = 128 // 텍스처 해상도\n  canvas.width = size\n  canvas.height = size\n  const context = canvas.getContext('2d')\n\n  // 배경색\n  context.fillStyle = bgColor\n  context.fillRect(0, 0, size, size)\n\n  // 텍스트\n  context.font = `Bold ${size * 0.4}px Arial` // 텍스트 크기\n  context.fillStyle = 'white'\n  context.textAlign = 'center'\n  context.textBaseline = 'middle'\n  context.fillText(text, size / 2, size / 2)\n\n  const texture = new THREE.CanvasTexture(canvas)\n  texture.needsUpdate = true\n  return texture\n}\n\n// 뷰큐브 업데이트 함수 (애니메이션 루프에서 호출됨)\nexport function updateViewCube() {\n  if (!cubeRenderer || !mainCameraRef) return\n\n  // 메인 카메라의 방향(quaternion)을 가져옵니다.\n  const mainCameraQuaternion = mainCameraRef.quaternion\n\n  // 뷰큐브 메쉬가 메인 카메라와 반대로 회전하도록 설정\n  // (카메라가 오른쪽으로 돌면 큐브의 +X 면이 보이도록)\n  const invQuaternion = mainCameraQuaternion.clone().invert()\n  viewCubeMesh.quaternion.copy(invQuaternion)\n  // 또는 뷰큐브 카메라를 회전시킬 수도 있습니다.\n  // cubeCamera.quaternion.copy(mainCameraQuaternion);\n\n  // 뷰큐브 렌더링\n  cubeRenderer.render(cubeScene, cubeCamera)\n}\n","import * as THREE from 'three' // THREE 네임스페이스 사용\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport openCascadeHelper from './openCascadeHelper'\nimport { loadFileAsync, getFileType } from '../share'\nimport { updateViewCube } from './viewCube' // 뷰큐브 업데이트 함수 import\n\nconst loadSTEPorIGES = async (openCascade, inputFile, addFunction, scene) => {\n  const fileType = getFileType(inputFile)\n  const fileName = `file.${fileType}`\n\n  await loadFileAsync(inputFile).then(async fileText => {\n    // Writes the uploaded file to Emscripten's Virtual Filesystem\n    openCascade.FS.createDataFile('/', fileName, fileText, true, true)\n\n    // Choose the correct OpenCascade file parsers to read the CAD file\n    var reader = null\n    if (fileType === 'step') {\n      reader = new openCascade.STEPControl_Reader_1()\n    } else if (fileType === 'iges') {\n      reader = new openCascade.IGESControl_Reader_1()\n    } else {\n      console.error(\"opencascade.js can't parse this extension! (yet)\")\n    }\n    const readResult = reader.ReadFile(fileName) // Read the file\n    if (readResult === openCascade.IFSelect_ReturnStatus.IFSelect_RetDone) {\n      console.log('file loaded successfully!     Converting to OCC now...')\n      const numRootsTransferred = reader.TransferRoots(\n        new openCascade.Message_ProgressRange_1()\n      ) // Translate all transferable roots to OpenCascade\n      const stepShape = reader.OneShape() // Obtain the results of translation in one OCCT shape\n      console.log(\n        inputFile.name + ' converted successfully!  Triangulating now...'\n      )\n\n      // Out with the old, in with the new!\n      scene.remove(scene.getObjectByName('shape'))\n      await addFunction(openCascade, stepShape, scene)\n      console.log(inputFile.name + ' triangulated and added to the scene!')\n\n      // Remove the file when we're done (otherwise we run into errors on reupload)\n      openCascade.FS.unlink(`/file.${fileType}`)\n    } else {\n      console.error(\n        'Something in OCCT went wrong trying to read ' + inputFile.name\n      )\n    }\n  })\n}\nexport { loadSTEPorIGES }\n\nexport const setupThreeJSViewport = () => {\n  var scene = new THREE.Scene() // THREE 네임스페이스 사용\n  scene.background = new THREE.Color(0xeeeeee) // 배경색 설정\n\n  var camera = new THREE.PerspectiveCamera(\n    75,\n    window.innerWidth / window.innerHeight, // 초기 비율, resize에서 업데이트 필요\n    0.1,\n    1000000\n  )\n\n  var renderer = new THREE.WebGLRenderer({ antialias: true })\n  const viewport = document.getElementById('viewport')\n  // 초기 크기 설정\n  renderer.setSize(viewport.clientWidth, viewport.clientHeight)\n  renderer.setPixelRatio(window.devicePixelRatio)\n  viewport.appendChild(renderer.domElement)\n\n  const light = new THREE.AmbientLight(0x404040, 2) // 강도 조절\n  scene.add(light)\n  const directionalLight = new THREE.DirectionalLight(0xffffff, 1.5) // 강도 조절\n  directionalLight.position.set(50, 100, 75) // 위치 조절\n  scene.add(directionalLight)\n  // 추가 조명 (선택 사항)\n  const directionalLight2 = new THREE.DirectionalLight(0xffffff, 1.0)\n  directionalLight2.position.set(-50, -50, -50)\n  scene.add(directionalLight2)\n\n  camera.position.set(0, 50, 100) // 초기 카메라 위치\n\n  const controls = new OrbitControls(camera, renderer.domElement)\n  controls.screenSpacePanning = true\n  controls.target.set(0, 0, 0) // 타겟을 원점으로 초기화\n  controls.enableDamping = true // 부드러운 움직임\n  controls.dampingFactor = 0.05\n  controls.update()\n\n  // --- 애니메이션 루프 ---\n  function animate() {\n    requestAnimationFrame(animate)\n    controls.update() // OrbitControls 업데이트 (damping 사용 시 필수)\n    renderer.render(scene, camera) // 메인 Scene 렌더링\n    updateViewCube() // 뷰큐브 업데이트 및 렌더링\n  }\n  animate() // 애니메이션 시작\n\n  // --- 창 크기 조절 처리 ---\n  function onWindowResize() {\n    const vp = document.getElementById('viewport')\n    if (!vp) return\n    const width = vp.clientWidth\n    const height = vp.clientHeight\n\n    camera.aspect = width / height\n    camera.updateProjectionMatrix()\n\n    renderer.setSize(width, height)\n    // 뷰큐브 렌더러는 크기가 고정되어 있으므로 업데이트할 필요 없음\n  }\n  window.addEventListener('resize', onWindowResize)\n\n  // 필요한 객체들 반환\n  return { scene, camera, controls, renderer }\n}\n\nconst addShapeToScene = async (openCascade, shape, scene) => {\n  openCascadeHelper.setOpenCascade(openCascade)\n  const facelist = await openCascadeHelper.tessellate(shape)\n  const [locVertexcoord, locNormalcoord, locTriIndices] =\n    await openCascadeHelper.joinPrimitives(facelist)\n  const tot_triangle_count = facelist.reduce(\n    (a, b) => a + b.number_of_triangles,\n    0\n  )\n  const [vertices, faces] = await openCascadeHelper.generateGeometry(\n    tot_triangle_count,\n    locVertexcoord,\n    locNormalcoord,\n    locTriIndices\n  )\n\n  const objectMat = new THREE.MeshStandardMaterial({\n    color: new THREE.Color(0.9, 0.9, 0.9),\n  })\n  const geometry = new THREE.Geometry()\n  geometry.vertices = vertices\n  geometry.faces = faces\n  const object = new THREE.Mesh(geometry, objectMat)\n\n  console.log(object)\n  object.name = 'shape'\n  object.rotation.x = -Math.PI / 2\n  scene.add(object)\n}\nexport { addShapeToScene }\n","// render_threejs/script.js\nimport * as THREE from 'three' // THREE import 추가\nimport { initOpenCascade } from '../share'\nimport {\n  loadSTEPorIGES,\n  setupThreeJSViewport,\n  addShapeToScene,\n} from './library'\nimport { initViewCube } from './viewCube.js'\n\n// setupThreeJSViewport 호출 및 결과 저장\nconst threeJsContext = setupThreeJSViewport()\nif (!threeJsContext) {\n  console.error('Failed to initialize Three.js viewport.')\n} else {\n  const { scene, camera, controls, renderer } = threeJsContext // controls 가져오기\n\n  // 뷰큐브 초기화\n  initViewCube(camera, renderer)\n\n  // --- 모델 로드 후 카메라 타겟 및 위치 업데이트 함수 ---\n  function focusCameraOnModel() {\n    const model = scene.getObjectByName('shape') // 이름으로 모델 찾기\n    if (model && controls) {\n      // 1. 모델의 Bounding Box 계산\n      const box = new THREE.Box3().setFromObject(model)\n      const center = box.getCenter(new THREE.Vector3())\n      const size = box.getSize(new THREE.Vector3())\n\n      // 2. OrbitControls의 target을 모델 중심으로 설정\n      controls.target.copy(center)\n\n      // 3. (선택 사항) 카메라 위치 조정하여 모델 전체가 보이도록 함\n      const maxDim = Math.max(size.x, size.y, size.z)\n      const fov = camera.fov * (Math.PI / 180)\n      let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2))\n      cameraZ *= 1.5 // 약간의 여유 공간 확보 (값을 조절하여 줌 레벨 변경)\n\n      // 현재 카메라 방향 유지하며 거리 조정 (더 부드러운 전환)\n      const direction = new THREE.Vector3()\n        .subVectors(camera.position, controls.target) // 이전 타겟 기준 방향\n        .normalize()\n\n      // 새 타겟 위치에서 계산된 거리만큼 떨어진 곳으로 카메라 이동\n      // 만약 direction 길이가 0이면 (카메라가 타겟에 있는 경우), 기본 방향 사용\n      if (direction.lengthSq() === 0) {\n        camera.position.copy(center)\n        camera.position.z += cameraZ // 기본 Z축 방향으로 이동\n      } else {\n        camera.position.copy(center).addScaledVector(direction, cameraZ)\n      }\n\n      // 4. 컨트롤 업데이트\n      controls.update()\n\n      console.log('Camera target set to model center:', center)\n    } else {\n      if (!model)\n        console.warn(\"Could not find model named 'shape' to focus on.\")\n      if (!controls)\n        console.warn('OrbitControls not available to update target.')\n      // 모델이 없거나 컨트롤이 없으면 기본 타겟 사용\n      controls?.target.set(0, 0, 0)\n      controls?.update()\n    }\n  }\n\n  initOpenCascade()\n    .then(openCascade => {\n      // 유저 업로드 리스너\n      const fileInput = document.getElementById('step-file')\n      if (fileInput) {\n        fileInput.addEventListener('input', async event => {\n          if (event.target.files.length > 0) {\n            // 기존 로직: 파일 로드 및 씬에 추가\n            await loadSTEPorIGES(\n              openCascade,\n              event.target.files[0],\n              addShapeToScene,\n              scene\n            )\n            // --- 로드 완료 후 카메라 포커스 ---\n            focusCameraOnModel()\n            // --- ---\n\n            event.target.value = ''\n          }\n        })\n      } else {\n        console.warn('File input element not found.')\n      }\n\n      // 테스트 버튼 리스너\n      const testButtons = document.getElementsByClassName('test')\n      for (const el of testButtons) {\n        el.addEventListener('click', async e => {\n          const filePath = e.target.name\n          try {\n            const blob = await fetch(filePath).then(res => {\n              if (!res.ok) {\n                throw new Error(\n                  `Failed to fetch ${filePath}: ${res.statusText}`\n                )\n              }\n              return res.blob()\n            })\n            const fileObject = new File([blob], filePath, {\n              type: 'application/octet-stream',\n            })\n\n            // 기존 로직: 파일 로드 및 씬에 추가\n            await loadSTEPorIGES(\n              openCascade,\n              fileObject,\n              addShapeToScene,\n              scene\n            )\n\n            // --- 로드 완료 후 카메라 포커스 ---\n            focusCameraOnModel()\n            // --- ---\n          } catch (error) {\n            console.error('Error loading test file:', error)\n            const resultDiv = document.getElementById('result')\n            if (resultDiv)\n              resultDiv.textContent = `Error loading ${filePath}: ${error.message}`\n          }\n        })\n      }\n    })\n    .catch(error => {\n      console.error('Failed to initialize OpenCascade:', error)\n      const resultDiv = document.getElementById('result')\n      if (resultDiv)\n        resultDiv.textContent = 'CAD 라이브러리를 초기화하는 데 실패했습니다.'\n    })\n}\n"],"names":["setOpenCascade","openCascade","this","tessellate","shape","facelist","BRepMesh_IncrementalMesh_2","ExpFace","TopExp_Explorer_1","Init","TopAbs_ShapeEnum","TopAbs_FACE","TopAbs_SHAPE","More","Next","myFace","TopoDS","Face_1","Current","aLocation","TopLoc_Location_1","myT","BRep_Tool","Triangulation","IsNull","this_face","vertex_coord","normal_coord","tri_indexes","number_of_triangles","pc","Poly_Connect_2","triangulation","get","Array","NbNodes","i","p","Node","Transformed","Transformation","X","Y","Z","myNormal","TColgp_Array1OfDir_2","StdPrs_ToolTriangulatedShape","Normal","Length","Lower","Upper","d","Value","orient","Orientation_1","triangles","Triangles","validFaceTriCount","nt","NbTriangles","t","n1","n2","n3","TopAbs_Orientation","TopAbs_FORWARD","tmp","push","joinPrimitives","obP","obN","obTR","advance","locVertexcoord","locNormalcoord","locTriIndices","forEach","myface","x","length","objGetTriangle","trianglenum","pID","qID","rID","generateGeometry","tot_triangle_count","vertices","faces","v","y","z","vertices_idx","normals_idx","a","b","c","n1_x","n1_y","n1_z","n2_x","n2_y","n2_z","n3_x","n3_y","n3_z","cubeScene","cubeCamera","cubeRenderer","viewCubeMesh","mainCameraRef","createFaceTexture","text","bgColor","canvas","document","createElement","size","width","height","context","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","texture","needsUpdate","loadSTEPorIGES","async","inputFile","addFunction","scene","fileType","fileName","then","FS","createDataFile","fileText","reader","STEPControl_Reader_1","IGESControl_Reader_1","console","error","ReadFile","IFSelect_ReturnStatus","IFSelect_RetDone","log","TransferRoots","Message_ProgressRange_1","stepShape","OneShape","name","remove","getObjectByName","unlink","addShapeToScene","reduce","objectMat","color","geometry","object","rotation","Math","PI","add","threeJsContext","background","camera","window","innerWidth","innerHeight","renderer","antialias","viewport","getElementById","setSize","clientWidth","clientHeight","setPixelRatio","devicePixelRatio","appendChild","domElement","light","directionalLight","position","set","directionalLight2","controls","OrbitControls","screenSpacePanning","target","enableDamping","dampingFactor","update","animate","requestAnimationFrame","render","invQuaternion","quaternion","clone","invert","copy","updateViewCube","addEventListener","vp","aspect","updateProjectionMatrix","setupThreeJSViewport","focusCameraOnModel","model","box","setFromObject","center","getCenter","getSize","maxDim","max","fov","cameraZ","abs","tan","direction","subVectors","normalize","lengthSq","addScaledVector","warn","mainCamera","container","alpha","frustumSize","materials","map","side","axesHelper","CUBE_SIZE","initViewCube","fileInput","event","files","value","testButtons","getElementsByClassName","el","filePath","e","blob","fetch","res","ok","Error","statusText","fileObject","File","type","resultDiv","textContent","message","catch"],"sourceRoot":""}