{"version":3,"file":"js/glb_viewer.e45520e32be70701b301.bundle.js","mappings":"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","sources":["webpack://cad-ocjs/webpack/runtime/chunk loaded","webpack://cad-ocjs/./src/viewCube.js","webpack://cad-ocjs/./src/glb_viewer/glb_viewer.js","webpack://cad-ocjs/webpack/bootstrap","webpack://cad-ocjs/webpack/runtime/define property getters","webpack://cad-ocjs/webpack/runtime/hasOwnProperty shorthand","webpack://cad-ocjs/webpack/runtime/jsonp chunk loading","webpack://cad-ocjs/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// render_threejs/viewCube.js\nimport * as THREE from 'three'\n\nlet cubeScene, cubeCamera, cubeRenderer\nlet viewCubeMesh\nlet mainCameraRef // 메인 카메라 참조\n\nconst CUBE_SIZE = 1 // 내부 큐브 크기\nconst MARGIN = 10 // 뷰포트에서의 여백 (px)\nconst CUBE_DIV_SIZE = 100 // 뷰큐브 div 크기 (px) - CSS와 일치\n\nexport function initViewCube(mainCamera, mainRenderer) {\n  mainCameraRef = mainCamera // 메인 카메라 참조 저장\n\n  const container = document.getElementById('viewcube-container')\n  if (!container) {\n    console.error('ViewCube container not found!')\n    return\n  }\n\n  // 1. 뷰큐브용 렌더러 설정\n  cubeRenderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }) // alpha:true 배경 투명\n  cubeRenderer.setSize(CUBE_DIV_SIZE, CUBE_DIV_SIZE)\n  cubeRenderer.setPixelRatio(window.devicePixelRatio)\n  container.appendChild(cubeRenderer.domElement)\n\n  // 2. 뷰큐브용 Scene 설정\n  cubeScene = new THREE.Scene()\n\n  // 3. 뷰큐브용 카메라 설정 (Orthographic)\n  const aspect = 1 // 정사각형\n  const frustumSize = CUBE_SIZE * 1.5 // 큐브가 카메라에 꽉 차도록 크기 조절\n  cubeCamera = new THREE.OrthographicCamera(\n    (frustumSize * aspect) / -2,\n    (frustumSize * aspect) / 2,\n    frustumSize / 2,\n    frustumSize / -2,\n    0.1,\n    100\n  )\n  cubeCamera.position.z = 5 // 카메라 위치\n\n  // 4. 뷰큐브 메쉬 생성 (텍스트 포함)\n  const loader = new THREE.TextureLoader()\n  const faceTextures = [\n    createFaceTexture('+X', 'rgb(255, 100, 100)'), // Right (+X)\n    createFaceTexture('-X', 'rgb(255, 150, 150)'), // Left (-X)\n    createFaceTexture('+Y', 'rgb(100, 255, 100)'), // Top (+Y)\n    createFaceTexture('-Y', 'rgb(150, 255, 150)'), // Bottom (-Y)\n    createFaceTexture('+Z', 'rgb(100, 100, 255)'), // Front (+Z)\n    createFaceTexture('-Z', 'rgb(150, 150, 255)'), // Back (-Z)\n  ]\n\n  const materials = faceTextures.map(\n    texture =>\n      new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide })\n  )\n  const geometry = new THREE.BoxGeometry(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE)\n  viewCubeMesh = new THREE.Mesh(geometry, materials)\n  cubeScene.add(viewCubeMesh)\n\n  // 5. (선택) 뷰큐브 주변에 축 표시기 추가 (선)\n  const axesHelper = new THREE.AxesHelper(CUBE_SIZE * 0.8)\n  cubeScene.add(axesHelper)\n}\n\n// 각 면에 텍스트를 그리는 함수\nfunction createFaceTexture(text, bgColor) {\n  const canvas = document.createElement('canvas')\n  const size = 128 // 텍스처 해상도\n  canvas.width = size\n  canvas.height = size\n  const context = canvas.getContext('2d')\n\n  // 배경색\n  context.fillStyle = bgColor\n  context.fillRect(0, 0, size, size)\n\n  // 텍스트\n  context.font = `Bold ${size * 0.4}px Arial` // 텍스트 크기\n  context.fillStyle = 'white'\n  context.textAlign = 'center'\n  context.textBaseline = 'middle'\n  context.fillText(text, size / 2, size / 2)\n\n  const texture = new THREE.CanvasTexture(canvas)\n  texture.needsUpdate = true\n  return texture\n}\n\n// 뷰큐브 업데이트 함수 (애니메이션 루프에서 호출됨)\nexport function updateViewCube() {\n  if (!cubeRenderer || !mainCameraRef) return\n\n  // 메인 카메라의 방향(quaternion)을 가져옵니다.\n  const mainCameraQuaternion = mainCameraRef.quaternion\n\n  // 뷰큐브 메쉬가 메인 카메라와 반대로 회전하도록 설정\n  // (카메라가 오른쪽으로 돌면 큐브의 +X 면이 보이도록)\n  const invQuaternion = mainCameraQuaternion.clone().invert()\n  viewCubeMesh.quaternion.copy(invQuaternion)\n  // 또는 뷰큐브 카메라를 회전시킬 수도 있습니다.\n  // cubeCamera.quaternion.copy(mainCameraQuaternion);\n\n  // 뷰큐브 렌더링\n  cubeRenderer.render(cubeScene, cubeCamera)\n}\n","// glb_viewer.js\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { initViewCube, updateViewCube } from '../viewCube'\n\n// 전역 상태 관리\nconst STATE = {\n  isControlsEnabled: true, // 카메라 컨트롤 활성화 상태\n  isSelectionMode: false, // 선택 모드 상태\n  selectedParts: [], // 선택된 부품 배열 (다중 선택 지원)\n}\n\n/**\n * 3D 뷰어 초기화 및 씬 설정\n * @returns {Object} Three.js 컨텍스트 객체\n */\nconst setupThreeJSViewport = () => {\n  // 씬 생성 및 초기화\n  const scene = new THREE.Scene()\n  scene.background = new THREE.Color(0xeeeeee)\n\n  // 카메라 설정\n  const viewport = document.getElementById('viewport')\n  const camera = new THREE.PerspectiveCamera(\n    75,\n    viewport.clientWidth / viewport.clientHeight,\n    0.1,\n    1000\n  )\n  camera.position.set(0, 0, 5)\n\n  // 렌더러 설정\n  const renderer = new THREE.WebGLRenderer({ antialias: true })\n  renderer.setSize(viewport.clientWidth, viewport.clientHeight)\n  renderer.setPixelRatio(window.devicePixelRatio)\n  renderer.outputEncoding = THREE.sRGBEncoding\n  viewport.appendChild(renderer.domElement)\n\n  // 조명 설정\n  const ambientLight = new THREE.AmbientLight(0x404040, 2)\n  scene.add(ambientLight)\n\n  const directionalLight = new THREE.DirectionalLight(0xffffff, 1.5)\n  directionalLight.position.set(1, 1, 1)\n  scene.add(directionalLight)\n\n  const directionalLight2 = new THREE.DirectionalLight(0xffffff, 1.0)\n  directionalLight2.position.set(-1, -1, -1)\n  scene.add(directionalLight2)\n\n  // 컨트롤 설정\n  const controls = new OrbitControls(camera, renderer.domElement)\n  controls.screenSpacePanning = true\n  controls.enableDamping = true\n  controls.dampingFactor = 0.05\n  controls.target.set(0, 0, 0)\n  controls.update()\n\n  // 창 크기 조절 처리\n  window.addEventListener('resize', () => {\n    const vp = document.getElementById('viewport')\n    if (!vp) return\n\n    const width = vp.clientWidth\n    const height = vp.clientHeight\n\n    camera.aspect = width / height\n    camera.updateProjectionMatrix()\n\n    renderer.setSize(width, height)\n  })\n\n  // 애니메이션 루프\n  function animate() {\n    requestAnimationFrame(animate)\n    controls.update()\n    renderer.render(scene, camera)\n    updateViewCube()\n  }\n  animate()\n\n  return { scene, camera, controls, renderer }\n}\n\n/**\n * GLB 모델 로드 함수\n * @param {Object} context - Three.js 컨텍스트 객체\n * @param {string} url - GLB 파일 경로\n * @returns {Promise} 로딩 완료 Promise\n */\nconst loadGLBModel = (context, url) => {\n  const { scene } = context\n  const infoElement = document.getElementById('info')\n  infoElement.textContent = '모델 로딩 중...'\n\n  return new Promise((resolve, reject) => {\n    const loader = new GLTFLoader()\n\n    loader.load(\n      url,\n      gltf => {\n        // 기존 모델 제거\n        const existingModel = scene.getObjectByName('model')\n        if (existingModel) {\n          scene.remove(existingModel)\n        }\n\n        // 모델 추가\n        const model = gltf.scene\n        model.name = 'model'\n\n        // 모든 메시에 고유 이름 부여 및 선택 가능하도록 설정\n        let partIndex = 0\n        model.traverse(child => {\n          if (child.isMesh) {\n            ++partIndex\n\n            // 메시가 선택 가능하도록 설정\n            child.userData.selectable = true\n\n            // 원본 재질 저장 (선택 시 하이라이트를 위해)\n            child.userData.originalMaterial = child.material.clone()\n\n            // 부품 정보 추가\n            child.userData.partInfo = {\n              id: partIndex,\n              name: child.name,\n              vertexCount: child.geometry.attributes.position.count,\n              triangleCount: child.geometry.index\n                ? child.geometry.index.count / 3\n                : 0,\n            }\n          }\n        })\n\n        scene.add(model)\n\n        // 모델 정보 표시\n        const box = new THREE.Box3().setFromObject(model)\n        const size = box.getSize(new THREE.Vector3())\n        const center = box.getCenter(new THREE.Vector3())\n        infoElement.innerHTML = `\n          <div>\n            <p><strong>모델 로드 완료</strong></p>\n            <p>크기: ${size.x.toFixed(2)} × ${size.y.toFixed(\n          2\n        )} × ${size.z.toFixed(2)}</p>\n            <p>중심점: (${center.x.toFixed(2)}, ${center.y.toFixed(\n          2\n        )}, ${center.z.toFixed(2)})</p>\n            <p>부품 수: ${partIndex}개</p>\n          </div>\n        `\n\n        resolve(model)\n      },\n      xhr => {\n        const progress = (xhr.loaded / xhr.total) * 100\n        infoElement.textContent = `로딩 중: ${progress.toFixed(0)}%`\n      },\n      error => {\n        infoElement.textContent = `모델 로드 오류: ${error.message}`\n        console.error('GLB 모델 로드 오류:', error)\n        reject(error)\n      }\n    )\n  })\n}\n\n/**\n * 카메라를 모델에 맞게 조정하는 함수\n * @param {Object} context - Three.js 컨텍스트 객체\n */\nconst focusCameraOnModel = context => {\n  const { scene, camera, controls } = context\n  const model = scene.getObjectByName('model')\n\n  if (model && controls) {\n    // 모델의 경계 상자 계산\n    const box = new THREE.Box3().setFromObject(model)\n    const center = box.getCenter(new THREE.Vector3())\n    const size = box.getSize(new THREE.Vector3())\n\n    // 카메라 타겟을 모델 중심으로 설정\n    controls.target.copy(center)\n\n    // 모델 크기에 맞게 카메라 위치 조정\n    const maxDim = Math.max(size.x, size.y, size.z)\n    const fov = camera.fov * (Math.PI / 180)\n    let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2))\n    cameraZ *= 1.5 // 여유 공간 확보\n\n    // 카메라 방향을 유지하며 위치 조정\n    const direction = new THREE.Vector3()\n      .subVectors(camera.position, controls.target)\n      .normalize()\n\n    // 새 타겟에서 계산된 거리만큼 떨어진 곳으로 카메라 이동\n    if (direction.lengthSq() === 0) {\n      camera.position.copy(center)\n      camera.position.z += cameraZ // 기본 Z축 방향\n    } else {\n      camera.position.copy(center).addScaledVector(direction, cameraZ)\n    }\n\n    // 컨트롤 업데이트\n    controls.update()\n  }\n}\n\n/**\n * 선택된 부품에 초점을 맞추는 함수\n * @param {Object} context - Three.js 컨텍스트 객체\n * @param {THREE.Object3D} object - 선택된 부품\n */\nconst focusOnPart = (context, object) => {\n  if (!object) return\n\n  const { camera, controls } = context\n\n  // 부품의 경계 상자 계산\n  const box = new THREE.Box3().setFromObject(object)\n  const center = box.getCenter(new THREE.Vector3())\n  const size = box.getSize(new THREE.Vector3())\n\n  // 카메라 타겟을 부품 중심으로 설정\n  controls.target.copy(center)\n\n  // 부품 크기에 맞게 카메라 위치 조정\n  const maxDim = Math.max(size.x, size.y, size.z)\n  const fov = camera.fov * (Math.PI / 180)\n  let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2))\n  cameraZ *= 3 // 여유 공간 확보\n\n  // 카메라 방향 유지하며 위치 조정\n  const direction = new THREE.Vector3()\n    .subVectors(camera.position, controls.target)\n    .normalize()\n\n  if (direction.lengthSq() === 0) {\n    camera.position.copy(center)\n    camera.position.z += cameraZ\n  } else {\n    camera.position.copy(center).addScaledVector(direction, cameraZ)\n  }\n\n  // 컨트롤 업데이트\n  controls.update()\n}\n\n/**\n * 파트 선택을 위한 레이캐스팅 설정\n * @param {Object} context - Three.js 컨텍스트 객체\n */\nconst setupPartSelection = context => {\n  const { scene, camera, renderer, controls } = context\n  const viewport = renderer.domElement\n  const raycaster = new THREE.Raycaster()\n  const mouse = new THREE.Vector2()\n\n  // 현재 선택된 객체와 마우스 오버된 객체 추적\n  let selectedObject = null\n  let hoveredObject = null\n\n  // 모드 토글 버튼 설정\n  const toggleModeButton = document.getElementById('toggle-mode')\n  if (toggleModeButton) {\n    toggleModeButton.addEventListener('click', () => {\n      STATE.isSelectionMode = !STATE.isSelectionMode\n      controls.enabled = !STATE.isSelectionMode\n\n      toggleModeButton.textContent = STATE.isSelectionMode\n        ? '모드: 부품 선택'\n        : '모드: 카메라 이동'\n\n      // 모드에 따라 버튼 스타일 변경\n      if (STATE.isSelectionMode) {\n        toggleModeButton.classList.add('active')\n        viewport.style.cursor = 'crosshair'\n      } else {\n        toggleModeButton.classList.remove('active')\n        viewport.style.cursor = 'grab'\n\n        // 모드 변경 시 호버링 초기화\n        resetHover()\n      }\n    })\n  }\n\n  // 하이라이트 재질 생성\n  const createHighlightMaterial = (originalMaterial, isSelected) => {\n    const material = originalMaterial.clone()\n\n    // 선택된 경우는 파란색, 호버링인 경우는 노란색으로 표시\n    const color = isSelected\n      ? new THREE.Color(0x2196f3)\n      : new THREE.Color(0xffeb3b)\n\n    // 재질 타입에 따라 다르게 처리\n    if (material.color) {\n      material.color.set(color)\n    }\n\n    // 재질 투명도 설정\n    if (material.opacity !== undefined) {\n      material.opacity = 0.8\n      material.transparent = true\n    }\n\n    material.emissive = new THREE.Color(isSelected ? 0x0d47a1 : 0xffc107)\n    material.emissiveIntensity = 0.5\n\n    return material\n  }\n\n  // 선택 상태 초기화 함수\n  const resetSelection = () => {\n    // 이전에 선택된 객체 초기화\n    if (selectedObject) {\n      selectedObject.material = selectedObject.userData.originalMaterial.clone()\n      selectedObject = null\n      STATE.selectedParts = []\n    }\n  }\n\n  // 호버링 상태 초기화 함수\n  const resetHover = () => {\n    if (hoveredObject && hoveredObject !== selectedObject) {\n      hoveredObject.material = hoveredObject.userData.originalMaterial.clone()\n      hoveredObject = null\n    }\n  }\n\n  // 모델의 부품 정보 업데이트\n  const updatePartsList = () => {\n    const model = scene.getObjectByName('model')\n    const partsListElement = document.getElementById('parts-list')\n\n    if (!partsListElement || !model) return\n\n    // 부품 목록 초기화\n    partsListElement.innerHTML = ''\n\n    // 부품 목록 생성\n    const meshes = []\n    model.traverse(child => {\n      if (child.isMesh && child.userData.selectable) {\n        meshes.push(child)\n      }\n    })\n\n    // 부품이 없는 경우\n    if (meshes.length === 0) {\n      const listItem = document.createElement('li')\n      listItem.textContent = '선택 가능한 부품이 없습니다.'\n      partsListElement.appendChild(listItem)\n      return\n    }\n\n    // 부품 목록 표시 (이름순 정렬)\n    meshes\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .forEach(mesh => {\n        const listItem = document.createElement('li')\n        listItem.textContent = `${mesh.name} (${mesh.uuid})`\n        listItem.title = `정점: ${\n          mesh.userData.partInfo?.vertexCount ?? 0\n        }, 삼각형: ${mesh.userData.partInfo?.triangleCount ?? 0}`\n        listItem.style.cursor = 'pointer'\n\n        // 부품 클릭 시 선택\n        listItem.addEventListener('click', () => {\n          resetSelection()\n          selectedObject = mesh\n          mesh.material = createHighlightMaterial(\n            mesh.userData.originalMaterial,\n            true\n          )\n          // 선택된 부품에 카메라 포커스\n          focusOnPart(context, mesh)\n\n          // 선택된 항목 스타일 변경\n          const items = partsListElement.querySelectorAll('li')\n          items.forEach(item => item.classList.remove('selected'))\n          listItem.classList.add('selected')\n\n          // 선택된 부품 배열에 추가\n          STATE.selectedParts = [mesh]\n        })\n\n        partsListElement.appendChild(listItem)\n      })\n  }\n\n  // 마우스 이동 이벤트 처리\n  viewport.addEventListener('mousemove', event => {\n    // 선택 모드일 때만 레이캐스팅 활성화\n    if (STATE.isSelectionMode) {\n      // 마우스 좌표 계산 (정규화된 장치 좌표)\n      const rect = viewport.getBoundingClientRect()\n      mouse.x = ((event.clientX - rect.left) / viewport.clientWidth) * 2 - 1\n      mouse.y = -((event.clientY - rect.top) / viewport.clientHeight) * 2 + 1\n\n      // 레이캐스터 업데이트\n      raycaster.setFromCamera(mouse, camera)\n\n      // 모델과의 교차점 계산\n      const model = scene.getObjectByName('model')\n      if (!model) return\n\n      const intersects = raycaster.intersectObjects(model.children, true)\n\n      // 이전 호버링 상태 초기화\n      resetHover()\n\n      // 선택 가능한 객체와 교차한 경우 호버링 효과 적용\n      if (intersects.length > 0) {\n        const object = intersects[0].object\n\n        if (object && object.userData && object.userData.selectable) {\n          // 이미 선택된 객체가 아닌 경우에만 호버링 효과 적용\n          if (object !== selectedObject) {\n            hoveredObject = object\n            object.material = createHighlightMaterial(\n              object.userData.originalMaterial,\n              false\n            )\n          }\n\n          // 커서 변경\n          viewport.style.cursor = 'pointer'\n        }\n      } else {\n        // 교차점 없는 경우 선택 모드에서는 crosshair 커서 유지\n        viewport.style.cursor = 'crosshair'\n      }\n    }\n  })\n\n  // 마우스 클릭 이벤트 처리\n  viewport.addEventListener('click', event => {\n    // 선택 모드일 때만 레이캐스팅 활성화\n    if (STATE.isSelectionMode) {\n      // 마우스 좌표 계산 (정규화된 장치 좌표)\n      const rect = viewport.getBoundingClientRect()\n      mouse.x = ((event.clientX - rect.left) / viewport.clientWidth) * 2 - 1\n      mouse.y = -((event.clientY - rect.top) / viewport.clientHeight) * 2 + 1\n\n      // 레이캐스터 업데이트\n      raycaster.setFromCamera(mouse, camera)\n\n      // 모델과의 교차점 계산\n      const model = scene.getObjectByName('model')\n      if (!model) return\n\n      const intersects = raycaster.intersectObjects(model.children, true)\n\n      // 이전 선택 초기화\n      resetSelection()\n\n      // 새 객체 선택\n      if (intersects.length > 0) {\n        const object = intersects[0].object\n\n        if (object && object.userData && object.userData.selectable) {\n          selectedObject = object\n          object.material = createHighlightMaterial(\n            object.userData.originalMaterial,\n            true\n          )\n          // 선택된 부품 배열에 추가\n          STATE.selectedParts = [object]\n\n          // 부품 목록에서 해당 항목 강조\n          const partsListElement = document.getElementById('parts-list')\n          if (partsListElement) {\n            const items = partsListElement.querySelectorAll('li')\n            items.forEach(item => {\n              if (item.textContent === object.name) {\n                item.classList.add('selected')\n\n                // 선택된 항목이 보이도록 스크롤\n                item.scrollIntoView({ behavior: 'smooth', block: 'nearest' })\n              } else {\n                item.classList.remove('selected')\n              }\n            })\n          }\n        }\n      }\n    }\n  })\n\n  // 키보드 이벤트 처리 - Shift 키를 누르면 일시적으로 모드 전환\n  document.addEventListener('keydown', event => {\n    if (event.key === 'Shift') {\n      const wasSelectionMode = STATE.isSelectionMode\n\n      // Shift 키를 누르면 일시적으로 반대 모드로 전환\n      STATE.isSelectionMode = !STATE.isSelectionMode\n      controls.enabled = !STATE.isSelectionMode\n\n      // 커서 업데이트\n      viewport.style.cursor = STATE.isSelectionMode ? 'crosshair' : 'grab'\n\n      // 호버링 초기화\n      if (!STATE.isSelectionMode) {\n        resetHover()\n      }\n\n      // 임시 모드 전환 상태 저장\n      viewport.dataset.tempModeChange = wasSelectionMode.toString()\n    } else if (event.key === 'f' && selectedObject) {\n      // F 키를 누르면 선택된 부품에 포커스\n      focusOnPart(context, selectedObject)\n    } else if (event.key === 'Escape') {\n      // ESC 키를 누르면 선택 초기화\n      resetSelection()\n\n      // 부품 목록에서 선택된 항목 초기화\n      const partsListElement = document.getElementById('parts-list')\n      if (partsListElement) {\n        const items = partsListElement.querySelectorAll('li')\n        items.forEach(item => item.classList.remove('selected'))\n      }\n    }\n  })\n\n  document.addEventListener('keyup', event => {\n    if (event.key === 'Shift' && viewport.dataset.tempModeChange) {\n      // Shift 키를 떼면 원래 모드로 복귀\n      STATE.isSelectionMode = viewport.dataset.tempModeChange === 'true'\n      controls.enabled = !STATE.isSelectionMode\n\n      // 커서 업데이트\n      viewport.style.cursor = STATE.isSelectionMode ? 'crosshair' : 'grab'\n\n      // 임시 모드 전환 상태 초기화\n      delete viewport.dataset.tempModeChange\n    }\n  })\n\n  // 선택 초기화 버튼 이벤트 설정\n  const clearSelectionButton = document.getElementById('clear-selection')\n  if (clearSelectionButton) {\n    clearSelectionButton.addEventListener('click', () => {\n      resetSelection()\n\n      // 부품 목록에서 선택된 항목 초기화\n      const partsListElement = document.getElementById('parts-list')\n      if (partsListElement) {\n        const items = partsListElement.querySelectorAll('li')\n        items.forEach(item => item.classList.remove('selected'))\n      }\n    })\n  }\n\n  // GLB 모델 로드 이벤트를 리스닝하여 부품 목록 업데이트\n  document.addEventListener('model-loaded', updatePartsList)\n\n  return {\n    resetSelection,\n    updatePartsList,\n    focusOnPart,\n  }\n}\n\n// 초기화 및 이벤트 설정\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Three.js 초기화\n  const context = setupThreeJSViewport()\n  const { camera, renderer, controls } = context\n\n  // 뷰큐브 초기화\n  initViewCube(camera, renderer)\n\n  // 파트 선택 기능 초기화\n  const selectionTools = setupPartSelection(context)\n\n  // 버튼 이벤트 설정\n  document.getElementById('load-model').addEventListener('click', async () => {\n    try {\n      // 공용 디렉토리에서 GLB 파일 로드\n      const model = await loadGLBModel(context, '/AntiqueCamera.glb')\n      focusCameraOnModel(context)\n\n      // 부품 목록 업데이트\n      selectionTools.updatePartsList()\n\n      // 모델 로드 완료 이벤트 발생\n      document.dispatchEvent(new Event('model-loaded'))\n    } catch (error) {\n      console.error('모델 로드 실패:', error)\n    }\n  })\n\n  document.getElementById('reset-view').addEventListener('click', () => {\n    focusCameraOnModel(context)\n  })\n\n  // 자동으로 모델 로드 (선택적)\n  loadGLBModel(context, '/AntiqueCamera.glb')\n    .then(() => {\n      focusCameraOnModel(context)\n\n      // 부품 목록 업데이트\n      selectionTools.updatePartsList()\n\n      // 모델 로드 완료 이벤트 발생\n      document.dispatchEvent(new Event('model-loaded'))\n    })\n    .catch(error => {\n      console.error('초기 모델 로드 실패:', error)\n    })\n})\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t721: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkcad_ocjs\"] = self[\"webpackChunkcad_ocjs\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [525,365], () => (__webpack_require__(362)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","cubeScene","cubeCamera","cubeRenderer","viewCubeMesh","mainCameraRef","createFaceTexture","text","bgColor","canvas","document","createElement","size","width","height","context","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","texture","needsUpdate","STATE","isControlsEnabled","isSelectionMode","selectedParts","loadGLBModel","url","scene","infoElement","getElementById","textContent","Promise","resolve","reject","GLTFLoader","load","gltf","existingModel","getObjectByName","remove","model","name","partIndex","traverse","child","isMesh","userData","selectable","originalMaterial","material","clone","partInfo","id","vertexCount","geometry","attributes","position","count","triangleCount","index","add","box","setFromObject","getSize","center","getCenter","innerHTML","x","toFixed","y","z","xhr","progress","loaded","total","error","message","console","focusCameraOnModel","camera","controls","target","copy","maxDim","Math","max","fov","PI","cameraZ","abs","tan","direction","subVectors","normalize","lengthSq","addScaledVector","update","focusOnPart","object","addEventListener","background","viewport","clientWidth","clientHeight","set","renderer","antialias","setSize","setPixelRatio","window","devicePixelRatio","outputEncoding","appendChild","domElement","ambientLight","directionalLight","directionalLight2","OrbitControls","screenSpacePanning","enableDamping","dampingFactor","vp","aspect","updateProjectionMatrix","animate","requestAnimationFrame","render","invQuaternion","quaternion","invert","updateViewCube","setupThreeJSViewport","mainCamera","container","alpha","frustumSize","materials","map","side","axesHelper","CUBE_SIZE","initViewCube","selectionTools","raycaster","mouse","selectedObject","hoveredObject","toggleModeButton","enabled","classList","style","cursor","resetHover","createHighlightMaterial","isSelected","color","undefined","opacity","transparent","emissive","emissiveIntensity","resetSelection","updatePartsList","partsListElement","meshes","push","length","listItem","sort","a","b","localeCompare","forEach","mesh","uuid","title","querySelectorAll","item","event","rect","getBoundingClientRect","clientX","left","clientY","top","setFromCamera","intersects","intersectObjects","children","scrollIntoView","behavior","block","key","wasSelectionMode","dataset","tempModeChange","toString","clearSelectionButton","setupPartSelection","async","dispatchEvent","Event","then","catch","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","splice","r","d","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}